class Database{constructor(e="indexedDB",t=1){this.dbName=e,this.dbVersion=t,this.db=null,this.ready=this.init()}init(){return new Promise((e,t)=>{let a=indexedDB.open(this.dbName,this.dbVersion);a.onupgradeneeded=e=>{let t=e.target.result;t.objectStoreNames.contains("collectionName")||t.createObjectStore("collectionName",{keyPath:"$id"})},a.onerror=e=>{console.error("Database error:",e.target.errorCode),t(e.target.errorCode)},a.onsuccess=t=>{this.db=t.target.result,e()}})}async waitForReady(){this.ready&&await this.ready}uniqueId(){return crypto.randomUUID()}async getTransaction(e,t){return await this.waitForReady(),this.db.transaction([e],t).objectStore(e)}handleRequest(e){return new Promise((t,a)=>{e.onsuccess=e=>{t(e.target.result)},e.onerror=e=>{a(e.target.error)}})}async listDocuments(e,t){let a=await this.getTransaction(e,"readonly"),r=a.getAll(),n=await this.handleRequest(r);return t?n.filter(e=>Object.entries(t).every(([t,a])=>e[t]===a)):n}async createDocument(e,t,a){let r=await this.getTransaction(e,"readwrite"),n={$id:t||this.uniqueId(),createdAt:new Date().toUTCString(),updatedAt:new Date().toUTCString(),...a},s=r.add(n);return await this.handleRequest(s),n}async getDocument(e,t){let a=await this.getTransaction(e,"readonly"),r=a.get(t),n=await this.handleRequest(r);if(n)return n;throw{code:404,message:"No data available"}}async updateDocument(e,t,a){let r=await this.getTransaction(e,"readwrite"),n=r.get(t),s=await this.handleRequest(n);if(s){let i={...s,...a,updatedAt:new Date().toUTCString()},o=r.put(i);return await this.handleRequest(o),i}throw{code:404,message:"No data available"}}async deleteDocument(e,t){let a=await this.getTransaction(e,"readwrite"),r=a.delete(t);return await this.handleRequest(r),{message:"Document deleted successfully"}}}
